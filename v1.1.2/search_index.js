var documenterSearchIndex = {"docs":
[{"location":"guide/#Package-Guide","page":"Guide","title":"Package Guide","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"SteadyWaves is a small package for calculating parameters of nonlinear, steady water waves. In this guide, we present how to install and use the package. ","category":"page"},{"location":"guide/#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"pkg> add SteadyWaves\njulia> using SteadyWaves","category":"page"},{"location":"guide/#Quick-start","page":"Guide","title":"Quick start","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"In this example, we set define basic parameters of a regular wave with respect to wavelength L and wave height H, while we use CairoMakie.jl for graphical presentation of results","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"using SteadyWaves\nusing CairoMakie # use the plotting package\n\nd = 1.0 # water depth (m)\nH = 0.2 # wave height (m)\nL = 2.0 # wavelength (m)\nk = 2π / L # wave number (rad/s)\nnothing # hide","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"and calculate wave profile using fourier_approx function along 2N+1 points with a parameter flag pc=1. Wave period T is calculated using wave_period function.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"\nN = 40 # set the number of points\nu = fourier_approx(d, H, L; pc=1, cc=1, N=N) # apply Fourier Approximation Method\nkη = [reverse(u[2:N+1]); u[1:N+1]] # vcat non-dimensional profile vector and its reverse\nT = wave_period(u, d, N) # calculate wave period\nx = range(0, L, 2N + 1) # discretize L to match kη\nη = kη / k # use dimensional values\n\n# CairoMakie figure\nwith_theme(theme_latexfonts()) do # use latex theme\n    fig = Figure(size = (300, 200), fontsize = 9)\n    ax = Axis(fig[1,1], \n            xlabel=L\"$x$ (m)\",\n            ylabel=L\"$\\eta$ (m)\",\n            # display wave parameters in the title\n            title=L\"$d=%$(d)$ m, $L=%$(L)$ m, $T=%$(round(T, digits=2))$ s, $H=%$(H)$ m\",\n            limits=(0, L, 0, η[N+1] * 1.1);) # set upper limit to 110% of η_max\n    lines!(ax, x, η)\n    fig # display figure\nend","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"In another simple example, we set basic parameters of a regular wave with respect to wave period T and height H","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"using SteadyWaves\nusing CairoMakie\n\nd = 1.0 # water depth (m)\nH = 0.2 # wave height (m)\nT = 2.0 # wave period (s)\nnothing # hide","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"and calculate wave profile using fourier_approx function along 2N+1 points with a parameter flag pc=2. Wavelength is calculated using wavelength function.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"\nN = 40 # set the number of points\nu = fourier_approx(d, H, T; pc=2, cc=1, N=N) # apply Fourier Approximation Method\nL = wavelength(u, d, N) # calculate wavelength (rad/s)\nk = 2π / L # get wave number (rad/m)\nkη = [reverse(u[2:N+1]); u[1:N+1]] # vcat non-dimensional profile vector and its reverse\nx = range(0, L, 2N + 1) # discretize L to match kη\nη = kη / k # use dimensional values\n\n# CairoMakie figure\nwith_theme(theme_latexfonts()) do # use latex theme\n    fig = Figure(size = (300, 200), fontsize = 9)\n    ax = Axis(fig[1,1], \n            xlabel=L\"$x$ (m)\",\n            ylabel=L\"$\\eta$ (m)\",\n            # display wave parameters in the title\n            title=L\"$d=%$(d)$ m, $L=%$(round(L, digits=2))$ m, $T=%$(T)$ s, $H=%$(H)$ m\",\n            limits=(0, L, 0, η[N+1] * 1.1);) # set upper limit to 110% of η_max\n    lines!(ax, x, η)\n    fig # display figure\nend","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"We may also check the wave_height.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"println(\"The wave height is $(wave_height(u, d, N)) m.\")","category":"page"},{"location":"guide/#Shoaling-waves","page":"Guide","title":"Shoaling waves","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"Here, we present a more complicated example, which reproduces a shoaling diagram. We follow Eldrup and Andersen [6], who presented shoaling coefficient K calculated by Fourier Approximation Method [1] as a function of water depth d normalized by deep-water wave number k_0 (cf. Figure 2 in [6]).","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"First, we define test cases in terms of deep-water wave steepness H_0L_0 and minimum values of water depth d_min for each case.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"using SteadyWaves\nusing CairoMakie\n\nH₀_L₀ = [0.003, 0.005, 0.01, 0.02, 0.03, 0.05] # set wave steepness cases\nd_min = [0.019, 0.0275, 0.046, 0.0784, 0.1091, 0.1714] # set minimal depth values\nnothing # hide","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"We set a number of points N for shoaling_approx (which uses in-place SteadyWaves.fourier_approx!), number of depth steps N_d and create a matrix container results for storing the outcome of analysis.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"N = 40 # set number of points\nN_d = 2000 # set number of steps for changing depth\nresults = zeros(N_d, 2 * length(H₀_L₀))\nnothing # hide","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"We define initial deep-water conditions, where we calculate angular wave frequency ω₀ according to linear dispersion relation.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"# initial conditions\ng = 9.81 # gravitational acceleration (m/s²)\nd₀ = 1 # water depth (m)\nL₀ = 2 # wavelength (m)\nk₀ = 2π / L₀ # wave number (rad/m)\nω₀ = √(g * k₀ * tanh(k₀ * d₀)) # angular wave frequency (rad/s)\nH₀ = H₀_L₀ * L₀ # wave heights (m)\nnothing # hide","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"We loop over wave cases each time defining a vector of depth values d from deep to shallow water according to a predefined minimal value d_min and applying shoaling_approx function to calculate shoaling coefficient K. We store the results in results.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"for i in eachindex(H₀)\n    d = reverse(range(d_min[i], 1, N_d))  * d₀ # water depths (m)\n    K = shoaling_approx(d, H₀[i], L₀; N=N) # shoaling coefficients\n    # save results\n    results[:, 2i-1] = k₀ * d\n    results[:, 2i] = K\nend\nnothing # hide","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"For reference, we calculate linear shoaling coefficient","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"K = sqrtfrackleft(1+frac2k_0d_0sinh2k_0d_0right)k_0left(1+frac2kdsinh2kdright)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"which is independent of wave steepness H_0L_0.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"d = reverse(range(0.01, 1, N_d))  * d₀ # water depths (m)\nk = wave_number.(d, ω₀) # linear wave numbers (rad/m)\n# calculate linear shoaling coefficient\nK = @. sqrt((k * (1 + 2k₀ * d₀ / sinh(2k₀ * d₀))) / (k₀ * (1 + 2k * d / sinh(2k * d))))\nnothing # hide","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Finally, we diagram the results.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"# CairoMakie figure\nwith_theme(theme_latexfonts()) do # use latex theme\n    fig = Figure(size = (400, 300), fontsize = 9)\n    ax = Axis(fig[1, 1], \n        xlabel=L\"$k_0d$\",\n        xscale=log10,\n        xticks=[0.1, 1, 10],\n        ylabel=L\"$K$\",\n        yscale=log10,\n        yticks=1:0.2:2.4,\n        limits=(0.04, π, 0.9, 2.4);\n        xminorticksvisible=true,\n        xminorticks=IntervalsBetween(10),\n        xminorgridvisible=true,\n        yminorticksvisible=true,\n        yminorticks=IntervalsBetween(4),\n        yminorgridvisible=true,\n    )\n    lines!(ax, k₀ * d, K;\n        color=:tomato,\n        linestyle=:dot,\n        label=\"linear theory\")\n    for i in eachindex(H₀_L₀)\n        lines!(ax, results[:, 2i-1], results[:, 2i];\n            color=:dodgerblue4,\n            linestyle=:dash, label=\"Rienecker and Fenton\")\n    end\n    text!(ax, k₀ * d_min, [2.3, 2.0, 1.6, 1.35, 1.25, 1.1],\n        text=[L\"H_0/L_0= %$(value)\" for value in H₀_L₀],\n        offset=(5, 0),\n        align=(:left, :center)\n    )\n    axislegend(ax, position=:rt, unique=true, patchsize=(42, 1))\n    fig\nend","category":"page"},{"location":"api/#API","page":"API reference","title":"API","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"CurrentModule = SteadyWaves","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [SteadyWaves]","category":"page"},{"location":"api/#SteadyWaves.SteadyWaves","page":"API reference","title":"SteadyWaves.SteadyWaves","text":"SteadyWaves is an implementation of Rienecker and Fenton (1981) Fourier Approximation Method to steady, periodic, nonlinear waves propagating in water of constant depth.\n\n\n\n\n\n","category":"module"},{"location":"api/#SteadyWaves.fourier_approx!-NTuple{5, Any}","page":"API reference","title":"SteadyWaves.fourier_approx!","text":"fourier_approx!(u, d, d_p, F, T; cc=1, N=10, g=9.81)\n\nUpdate approximate solution u of a steady wave of power F and period T propagating in water of changing depth from d to d_p using Fourier Approximation Method.\n\nArguments\n\nu: solution matrix being mutated\nd: initial water depth (m)\nd_p: target water depth (m)\nF: wave power (kg m/s)\nT: wave period (s)\ncc: current criterion; cc=1 - Stokes (default), cc=2 - Euler\nN: number of solution eigenvalues, defaults to N=10\n\n\n\n\n\n","category":"method"},{"location":"api/#SteadyWaves.fourier_approx-Tuple{Any, Any, Any}","page":"API reference","title":"SteadyWaves.fourier_approx","text":"fourier_approx(d, H, P; pc=1, cc=1, N=10, M=1, g=9.81)\n\nApproximate solution u of a steady wave of height H and length L propagating in water of depth d using Fourier Approximation Method.\n\nArguments\n\nd: water depth (m)\nH: wave height (m)\nP: wave parameter - length L (m) or period T (s)\npc: parameter criterion; pc=1 - length (default), pc=2 - period\ncc: current criterion; cc=1 - Stokes (default), cc=2 - Euler\nN: number of solution eigenvalues, defaults to N=10\nM: number of height steps, defaults to M=1\ng: gravity acceleration (m/s^2), defaults to g=9.81\n\nOutput\n\nu[1:N+1]: free surface elevation kη\nu[N+2:2N+1]: stream function coefficients B\nu[2N+2]: wave celerity c√(k/g)\nu[2N+3]: mean water depth kη̄\nu[2N+4]: volume flux due to waves q√(k³/g)\nu[2N+5]: Bernoulli constant rk/g\nu[2N+6]: mean flow velocity Ū√(k/g)\nu[2N+7]: wave height kH\n\n\n\n\n\n","category":"method"},{"location":"api/#SteadyWaves.init_conditions-NTuple{6, Any}","page":"API reference","title":"SteadyWaves.init_conditions","text":"init_conditions(d, H, P, pc, N, M)\n\nCalculate initial conditions u0 of a steady wave of height H and length L propagating in water of depth d using linear wave theory.\n\nArguments\n\nd: water depth (m)\nH: wave height (m)\nP: wave parameter - length L (m) or period T (s)\npc: parameter criterion; pc=1 - length, pc=2 - period\nN: number of solution eigenvalues\nM: number of height steps\n\nOutput\n\nu[1:N+1]: free surface elevation kη\nu[N+2:2N+1]: stream function coefficients B\nu[2N+2]: wave celerity c√(k/g)\nu[2N+3]: mean water depth kη̄\nu[2N+4]: volume flux due to waves q√(k³/g)\nu[2N+5]: Bernoulli constant rk/g\nu[2N+6]: mean flow velocity Ū√(k/g)\n\n\n\n\n\n","category":"method"},{"location":"api/#SteadyWaves.nonlinear_system_shoaling-Tuple{Any, Any, Any}","page":"API reference","title":"SteadyWaves.nonlinear_system_shoaling","text":"nonlinear_system_shoaling(du, u, p)\n\nDefine nonlinear system for shoaling waves f(u) = 0 with parameters p.\n\n\n\n\n\n","category":"method"},{"location":"api/#SteadyWaves.nonlinear_system_steady-Tuple{Any, Any, Any}","page":"API reference","title":"SteadyWaves.nonlinear_system_steady","text":"nonlinear_system_steady(du, u, p)\n\nDefine nonlinear system for steady waves f(u) = 0 with parameters p.\n\n\n\n\n\n","category":"method"},{"location":"api/#SteadyWaves.shoaling_approx-Tuple{Any, Any, Any}","page":"API reference","title":"SteadyWaves.shoaling_approx","text":"shoaling_approx(d, H, L; cc=2, N=10, g=9.81)\n\nCalculate shoaling coefficients K in range of depth values d for wave of length L and height H.\n\nArguments\n\nd: vector of decreasing water depths (m)\nL: initial wavelength (m) - corresponding to d[1]\nH: initial wave height (m) - corresponding to d[1]\ncc: current criterion; cc=1 - Stokes, cc=2 - Euler (default)\nN: number of solution eigenvalues, defaults to N=10\ng: gravity acceleration (m/s^2), defaults to g=9.81\n\nOutput\n\nK: vector of shoaling coefficient values\n\n\n\n\n\n","category":"method"},{"location":"api/#SteadyWaves.wave_height-Tuple{Any, Any, Any}","page":"API reference","title":"SteadyWaves.wave_height","text":"wave_height(u, d, N)\n\nCalculate dimensional wave height H from solution u.\n\n\n\n\n\n","category":"method"},{"location":"api/#SteadyWaves.wave_number","page":"API reference","title":"SteadyWaves.wave_number","text":"wave_number(d, ω, g=9.81, ϵ=10^-12)\n\nCalculate wave_number k based on depth d, angular wave frequency ω and gravitational acceleration g for given accuracy ϵ according to linear wave theory.\n\n\n\n\n\n","category":"function"},{"location":"api/#SteadyWaves.wave_period-Tuple{Any, Any, Any}","page":"API reference","title":"SteadyWaves.wave_period","text":"wave_period(u, d, N; g=9.81)\n\nCalculate dimensional wave period T from solution u.\n\n\n\n\n\n","category":"method"},{"location":"api/#SteadyWaves.wave_power-Tuple{Any, Any}","page":"API reference","title":"SteadyWaves.wave_power","text":"wave_power(u, N)\n\nCalculate dimensionless wave power F from solution u (non-public function).\n\n\n\n\n\n","category":"method"},{"location":"api/#SteadyWaves.wavelength-Tuple{Any, Any, Any}","page":"API reference","title":"SteadyWaves.wavelength","text":"wavelength(u, d, N)\n\nCalculate dimensional wavelength L from solution u.\n\n\n\n\n\n","category":"method"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"M. M. Rienecker and J. D. Fenton. A Fourier approximation method for steady water waves. J. Fluid Mech. 104, 119–137 (1981).\n\n\n\nJ. D. Fenton. The numerical solution of steady water wave problems. Comput. Geosci. 14, 357–368 (1988).\n\n\n\nJ. D. Fenton. In: Numerical methods for noninear waves, Vol. 5 of Advances in Coastal and Ocean Engineering, edited by P. L.-F. Liu (World Scientific, 1999); pp. 241–324.\n\n\n\nJ. M. Williams. Limiting gravity waves in water of finite depth. Phil. Trans. R. Soc. A 302, 139–188 (1981).\n\n\n\nA. Pal, F. Holtorf, A. Larsson, T. Loman, F. Schaefer, Q. Qu, A. Edelman and C. Rackauckas. NonlinearSolve. jl: High-Performance and Robust Solvers for Systems of Nonlinear Equations in Julia (2024), arXiv:2403.16341 [math.NA].\n\n\n\nM. R. Eldrup and T. L. Andersen. Numerical study on regular wave shoaling, de-shoaling and decomposition of free/bound waves on gentle and steep foreshores. J. Mar. Sci. Eng. 8, 334 (2020).\n\n\n\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SteadyWaves","category":"page"},{"location":"#SteadyWaves.jl","page":"Home","title":"SteadyWaves.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Rienecker and Fenton [1] Fourier Approximation Method to steady, periodic, nonlinear waves propagating in water of constant depth.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SteadyWaves.jl is a Julia package for calculation of properties of steady, periodic, and nonlinear waves within the framework of potential flow. The solution is derived using a Fourier Approximation Method applied to a periodic boundary value problem of waves propagating in water of constant depth [1–3] up to a limiting height [4] with additional capability to describe nonlinear shoaling waves [1]. Unlike Fenton's implementation of the method in C and Roenby's Matlab script, here, we use NonlinearSolve.jl package [5] to solve a set of nonlinear equations using RobustMultiNewton mode.","category":"page"},{"location":"#Wave-problem","page":"Home","title":"Wave problem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We consider steady, periodic waves propagating in water of constant depth. The waves of height H and length L travel at celerity c. The bottom is horizontal, rigid and impervious. The fluid mass is oscillating under restoring force of gravity defined by the acceleration g. A schematic view of the plane wave problem is presented in figure 1.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: figure 1) Figure 1. Sketch of a fluid domain with coordinate system definition; the wave of height H, length L, and profile eta(x t) travels in water of mean depth d at celerity c.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The basic parameters characterizing regular wave train are listed below:","category":"page"},{"location":"","page":"Home","title":"Home","text":"d water depth (m);\nH wave height (m);\nL wave length (m);\nk wave number (rad/s);\nc wave celerity;\nT wave period (s);","category":"page"},{"location":"","page":"Home","title":"Home","text":"noting that c=LT.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The wave problem is defined by parameters d, H, L or T, and the mean current baru. There are two possible ways of defining the current criterion. The first one corresponds to the time-mean Eulerian current c_E","category":"page"},{"location":"","page":"Home","title":"Home","text":"c - c_E + baru = 0","category":"page"},{"location":"","page":"Home","title":"Home","text":"while the second one corresponds to the mean mass-transport velocity c_S","category":"page"},{"location":"","page":"Home","title":"Home","text":"c - c_S - fracQd = 0","category":"page"},{"location":"","page":"Home","title":"Home","text":"where Q is the volume flux. Please see [1–3] for more in-depth discussion on current criteria.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the area occupied by the inviscid and incompressible fluid, the irrotational oscillatory flow is defined by some physical quantities of practical interest such as displacement, velocity and acceleration of fluid elements and pressure:","category":"page"},{"location":"","page":"Home","title":"Home","text":"eta(x t) free-surface elevation above the bottom (m);\nu(x z t) horizontal velocity component (m/s);\nw(x z t) vertical velocity component (m/s);\np(x z t) pressure (Pa).","category":"page"}]
}
